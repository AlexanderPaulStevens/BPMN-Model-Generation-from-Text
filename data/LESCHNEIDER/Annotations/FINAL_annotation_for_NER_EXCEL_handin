{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1fweKsc2qpTZS7MIzYphmED9HT-MZ2raW","authorship_tag":"ABX9TyPVXkjefY4kga8NqQM7gIIo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# EXCEL ANNOTATION TRANSFORMATIONT\n","This workbook serves as an example on how to transform annotated NER documents with color in Excel to the desired data format like PET."],"metadata":{"id":"e85SE7f3zrbE"}},{"cell_type":"markdown","source":["**Annotation tester** via color in excel:\n","takeaways:\n","*   color the complete cell (so background and not the text itself)\n","*   every token in a different cell\n","*   one sentence per row\n","*   see data/LESCHNEIDER/annotations/NER_COLOR_CODING_ALL_DOCS folder for excel sheets to see an example on input for transformation\n","\n","\n","\n","-> is the same formatting of an example data instance of Token Classification data:\n","{\n","  \"document name\":\"doc-1.1\",\n","  \"sentence-ID\":1,\n","  \"tokens\":[\"Whenever\",\"the\",\"sales\",\"department\",\"receives\",\"an\",\"order\",\",\",\"a\",\"new\",\"process\",\"instance\",\"is\",\"created\",\".\"],\n","  \"ner-tags\":[\"O\",\"B-Actor\",\"I-Actor\",\"I-Actor\",\"B-Activity\",\"B-Activity Data\",\"I-Activity Data\",\"O\",\"O\",\"O\",\"O\",\"O\",\"O\",\"O\",\"O\"]\n","}\n","\n","\n"],"metadata":{"id":"O5723zj4NXDp"}},{"cell_type":"markdown","source":["Now some code tryouts to go from json annotations to colored excel:\n","\n","\n"],"metadata":{"id":"Hr3-64z7QlCW"}},{"cell_type":"code","source":["!pip install openpyxl"],"metadata":{"id":"y1g3w6U4e3z0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["This is the color tagging scheme:"],"metadata":{"id":"-imF-_11yS8L"}},{"cell_type":"code","source":["   ner_tag_colors = {\n","    'E6194B': 'B-Actor',  # Bright red\n","    '3CB44B': 'I-Actor',  # Green\n","    'FFE119': 'B-Activity',  # Yellow\n","    '4363D8': 'I-Activity',  # Blue\n","    'F58231': 'B-Activity Data',  # Orange\n","    '911EB4': 'I-Activity Data',  # Purple\n","    '46F0F0': 'B-Further Specification',  # Light blue\n","    'F032E6': 'I-Further Specification',  # Pink\n","    'BCF60C': 'B-XOR Gateway',  # lime green\n","    'FABEBE': 'I-XOR Gateway',  # flamingo pink\n","    '008080': 'B-Condition Specification',  # appelblauw\n","    'E6BEFF': 'I-Condition Specification',  # light purple\n","    '9A6324': 'B-AND Gateway',  # Brown\n","    'FFFAC8': 'I-AND Gateway',  # Beige\n","    'FFFFFF': 'O'  # White\n","}"],"metadata":{"id":"XeBVwXs6V-2w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import openpyxl\n","from openpyxl.styles import PatternFill\n","\n","# Function to create a new Excel workbook and fill it with data from JSON\n","def json_to_excel(json_data, output_file_path)\n","\n","    # Create a new Excel workbook and select the active worksheet\n","    wb = openpyxl.Workbook()\n","    ws = wb.active\n","\n","    # Define the header row\n","    headers = ['Sentence ID', 'Document Name'] + [f'Token {i}' for i in range(1, 21)]  # Adjust the range based on your max tokens\n","    ws.append(headers)\n","\n","    # Fill the worksheet with data from JSON\n","    for document in json_data:\n","        doc_name = document['document name']\n","        sentence_id = document['sentence-ID']\n","        tokens = document['tokens']\n","        ner_tags = document['ner-tags']\n","\n","        # Prepare the row with sentence ID, document name, and tokens\n","        row = [sentence_id, doc_name] + tokens + [''] * (20 - len(tokens))  # Adjust based on your max tokens\n","        ws.append(row)\n","\n","        # Apply color coding to tokens based on NER tags\n","        for i, tag in enumerate(ner_tags, start=3):  # Adjust start based on actual column start for tokens\n","            cell = ws.cell(row=ws.max_row, column=i)\n","            fill = PatternFill(start_color=ner_tag_colors.get(tag, 'FFFFFF'), end_color=ner_tag_colors.get(tag, 'FFFFFF'), fill_type=\"solid\")\n","            cell.fill = fill\n","\n","    # Save the workbook to a file\n","    wb.save(output_file_path)\n","\n","# Example usage:\n","data = [{\n","    \"document name\": \"doc-10.1\",\n","    \"sentence-ID\": 0,\n","    \"tokens\": [\n","      \"The\",\n","      \"MPON\",\n","      \"sents\",\n","      \"the\",\n","      \"dismissal\",\n","      \"to\",\n","      \"the\",\n","      \"MPOO\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\",\n","      \"B-Actor\",\n","      \"I Actor\",\n","      \"O\"\n","    ]\n","  },\n","  {\n","    \"document name\": \"doc-10.1\",\n","    \"sentence-ID\": 1,\n","    \"tokens\": [\n","      \"The\",\n","      \"MPOO\",\n","      \"reviews\",\n","      \"the\",\n","      \"dismissal\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\"\n","    ]\n","  },\n","  {\n","    \"document name\": \"doc-10.1\",\n","    \"sentence-ID\": 2,\n","    \"tokens\": [\n","      \"The\",\n","      \"MPOO\",\n","      \"opposes\",\n","      \"the\",\n","      \"dismissal\",\n","      \"of\",\n","      \"MPON\",\n","      \"or\",\n","      \"the\",\n","      \"MPOO\",\n","      \"confirmes\",\n","      \"the\",\n","      \"dismissal\",\n","      \"of\",\n","      \"the\",\n","      \"MPON\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\",\n","      \"O\",\n","      \"B-XOR Gateway\",\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\"\n","    ]\n","  }\n","    # Your JSON data here\n","]\n","\"\"\"\n","output_file_path = 'output_sentences_COLOR_restructured.xlsx'\n","json_to_excel(data, output_file_path)\n","\n","print(f'Excel file created at {output_file_path}')\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o4He0aLRQkqa","executionInfo":{"status":"ok","timestamp":1709656620640,"user_tz":-60,"elapsed":240,"user":{"displayName":"Charlotte Schneider","userId":"15797801204403852136"}},"outputId":"c0416df1-6a96-4614-8fe4-0ad6a2aa421e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Excel file created at output_sentences_COLOR_restructured.xlsx\n"]}]},{"cell_type":"markdown","source":["Transform from colored cell tokens in excel to json format like PET."],"metadata":{"id":"0FY1wWemqBU4"}},{"cell_type":"code","source":["# Installeer openpyxl als het niet reeds ge√Ønstalleerd is: library to read\n","\n","# Importeer de benodigde bibliotheken\n","import openpyxl\n","import json\n","\n","# Laad het Excel bestand\n","def load_excel(file_path):\n","    workbook = openpyxl.load_workbook(file_path)\n","    sheet = workbook.active\n","    return sheet\n","\n","# Parse de zinnen en hun kleuren naar de gewenste JSON structuur\n","def parse_sentences_to_json(sheet, kleur_naar_label):\n","    documents = []\n","\n","    for row in sheet.iter_rows(min_row=2, values_only=False):\n","        # Check if the essential information ('document name' or 'sentence-ID') is missing\n","        if row[0].value is None or row[1].value is None:\n","            break  # Exit the loop if an essential info is missing\n","\n","        document_name = row[1].value  # Document name from the first column\n","        sentence_id = int(row[0].value)  # Sentence ID from the second column, converted to an integer\n","        tokens = []\n","        ner_tags = []\n","\n","        for cell in row[2:]:  # Start at the third column for tokens\n","            if cell.value:  # Ignore empty cells\n","                tokens.append(cell.value)\n","                color = cell.fill.start_color.rgb[2:] if cell.fill.start_color.rgb else None\n","                label = kleur_naar_label.get(color, 'O')\n","                ner_tags.append(label)\n","\n","        # Create a document structure for each sentence\n","        document = {\n","            \"document name\": document_name,\n","            \"sentence-ID\": sentence_id,\n","            \"tokens\": tokens,\n","            \"ner-tags\": ner_tags\n","        }\n","        documents.append(document)\n","\n","    return documents\n","\n","# Definieer de kleur-label mapping\n","kleur_naar_label = {\n","    'E6194B': 'B-Actor',  # Bright red\n","    '3CB44B': 'I-Actor',  # Green\n","    'FFE119': 'B-Activity',  # Yellow\n","    '4363D8': 'I-Activity',  # Blue\n","    'F58231': 'B-Activity Data',  # Orange\n","    '911EB4': 'I-Activity Data',  # Purple\n","    '46F0F0': 'B-Further Specification',  # Light blue\n","    'F032E6': 'I-Further Specification',  # Pink\n","    'BCF60C': 'B-XOR Gateway',  # lime green\n","    'FABEBE': 'I-XOR Gateway',  # flamingo pink\n","    '008080': 'B-Condition Specification',  # appelblauw\n","    'E6BEFF': 'I-Condition Specification',  # light purple\n","    '9A6324': 'B-AND Gateway',  # Brown\n","    'FFFAC8': 'I-AND Gateway',  # Beige\n","    'FFFFFF': 'O'  # White\n","}\n","\n","# Stel het pad naar je bestand in (wijzig dit naar het juiste bestandspad)\n","file_path = '/content/drive/MyDrive/THESIS/DATA/LESCHNEIDER DATA/Documents/TOBEPROCESSED/doc-20.15.xlsx'\n","\n","# Laad het Excel bestand\n","sheet = load_excel(file_path)\n","\n","# Parse de zinnen naar JSON\n","documents_json = parse_sentences_to_json(sheet, kleur_naar_label)\n","\n","# Output de JSON structuur\n","print(json.dumps(documents_json, indent=2))\n","\n","output_file_path = '/content/drive/MyDrive/THESIS/DATA/LESCHNEIDER DATA/Documents/FORMATTED_DATA_ELEMENTS/doc-20.15_NER.json'\n","\n","# Schrijf de JSON naar een bestand op de opgegeven locatie\n","with open(output_file_path, 'w') as json_file:\n","    json.dump(documents_json, json_file, indent=2)\n","\n","# Print een bevestiging dat het bestand succesvol is opgeslagen\n","print(f\"JSON-bestand is succesvol opgeslagen op locatie: {output_file_path}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yarBqRyKezue","executionInfo":{"status":"ok","timestamp":1712130716239,"user_tz":-120,"elapsed":1128,"user":{"displayName":"Charlotte Schneider","userId":"15797801204403852136"}},"outputId":"e5ecc8d1-3ab1-44c4-fdb8-a8d79edce9f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[\n","  {\n","    \"document name\": \"doc-20.15 library request\",\n","    \"sentence-ID\": 0,\n","    \"tokens\": [\n","      \"When\",\n","      \"a\",\n","      \"request\",\n","      \"for\",\n","      \"a\",\n","      \"book\",\n","      \"comes\",\n","      \"in\",\n","      \",\",\n","      \"the\",\n","      \"library\",\n","      \"staff\",\n","      \"member\",\n","      \"consults\",\n","      \"the\",\n","      \"digital\",\n","      \"catalog\",\n","      \"to\",\n","      \"check\",\n","      \"for\",\n","      \"the\",\n","      \"book's\",\n","      \"availability\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"I-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\"\n","    ]\n","  },\n","  {\n","    \"document name\": \"doc-20.15 library request\",\n","    \"sentence-ID\": 1,\n","    \"tokens\": [\n","      \"If\",\n","      \"the\",\n","      \"book\",\n","      \"is\",\n","      \"currently\",\n","      \"on\",\n","      \"loan\",\n","      \"or\",\n","      \"not\",\n","      \"in\",\n","      \"the\",\n","      \"library's\",\n","      \"collection\",\n","      \",\",\n","      \"the\",\n","      \"staff\",\n","      \"member\",\n","      \"informs\",\n","      \"the\",\n","      \"requester\",\n","      \"right\",\n","      \"away\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"B-XOR Gateway\",\n","      \"B-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"O\",\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"I-Actor\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"O\",\n","      \"O\",\n","      \"O\"\n","    ]\n","  },\n","  {\n","    \"document name\": \"doc-20.15 library request\",\n","    \"sentence-ID\": 2,\n","    \"tokens\": [\n","      \"If\",\n","      \"the\",\n","      \"book\",\n","      \"is\",\n","      \"available\",\n","      \",\",\n","      \"the\",\n","      \"staff\",\n","      \"member\",\n","      \"starts\",\n","      \"the\",\n","      \"checkout\",\n","      \"procedure\",\n","      \"by\",\n","      \"logging\",\n","      \"the\",\n","      \"book\",\n","      \"against\",\n","      \"the\",\n","      \"requester's\",\n","      \"library\",\n","      \"account\",\n","      \"and\",\n","      \"simultaneously\",\n","      \"retrieving\",\n","      \"the\",\n","      \"book\",\n","      \"using\",\n","      \"the\",\n","      \"automatic\",\n","      \"system\",\n","      \".\"\n","    ],\n","    \"ner-tags\": [\n","      \"B-XOR Gateway\",\n","      \"B-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"I-Condition Specification\",\n","      \"O\",\n","      \"B-Actor\",\n","      \"I-Actor\",\n","      \"I-Actor\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"O\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"B-Further Specification\",\n","      \"I-Further Specification\",\n","      \"I-Further Specification\",\n","      \"I-Further Specification\",\n","      \"I-Further Specification\",\n","      \"B-AND Gateway\",\n","      \"I-AND Gateway\",\n","      \"B-Activity\",\n","      \"B-Activity Data\",\n","      \"I-Activity Data\",\n","      \"B-Further Specification\",\n","      \"I-Further Specification\",\n","      \"I-Further Specification\",\n","      \"I-Further Specification\",\n","      \"O\"\n","    ]\n","  }\n","]\n","JSON-bestand is succesvol opgeslagen op locatie: /content/drive/MyDrive/THESIS/DATA/LESCHNEIDER DATA/Documents/FORMATTED_DATA_ELEMENTS/doc-20.15_NER.json\n"]}]},{"cell_type":"markdown","source":["Transform token(spans) into mention chunks\n"],"metadata":{"id":"-7VlSdfAtjVk"}},{"cell_type":"code","source":["def transform_data(data):\n","    transformed = []\n","\n","    for sentence in data:\n","        current_mention = None\n","        for i, (token, tag) in enumerate(zip(sentence[\"tokens\"], sentence[\"ner-tags\"])):\n","            if tag.startswith('B-'):\n","                # Save current mention if it exists\n","                if current_mention is not None:\n","                    transformed.append(current_mention)\n","\n","                # Start a new mention\n","                current_mention = {\n","                    \"text\": token,\n","                    \"token_indices\": [i],\n","                    \"sentence_id\": sentence[\"sentence-ID\"],\n","                    \"ner\": tag[2:]  # Remove the 'B-' prefix\n","                }\n","            elif tag.startswith('I-') and current_mention is not None:\n","                # Append token to the current mention\n","                current_mention[\"text\"] += \" \" + token\n","                current_mention[\"token_indices\"].append(i)\n","            else:\n","                # Save and reset the current mention when encountering 'O' or a new 'B-' tag\n","                if current_mention is not None:\n","                    transformed.append(current_mention)\n","                    current_mention = None\n","\n","        # Don't forget to add the last mention in the sentence\n","        if current_mention is not None:\n","            transformed.append(current_mention)\n","\n","    return transformed\n","\n","file_path = '/content/annotated_data_TEST.json'\n","\n","# Load the data from the JSON file\n","with open(file_path, 'r') as file:\n","    data_tokens = json.load(file)\n","\n","transformed_data = transform_data(data_tokens)\n","transformed_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4B37Ap2ro3H","executionInfo":{"status":"ok","timestamp":1710538147452,"user_tz":-60,"elapsed":243,"user":{"displayName":"Charlotte Schneider","userId":"15797801204403852136"}},"outputId":"5bf04bdb-7f91-47e6-d966-83c483b5f8e1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'text': 'The employee',\n","  'token_indices': [0, 1],\n","  'sentence_id': 0,\n","  'ner': 'Actor'},\n"," {'text': 'does', 'token_indices': [2], 'sentence_id': 0, 'ner': 'Activity'},\n"," {'text': 'a kickoff presentation',\n","  'token_indices': [3, 4, 5],\n","  'sentence_id': 0,\n","  'ner': 'Activity Data'},\n"," {'text': 'of his approved project',\n","  'token_indices': [6, 7, 8, 9],\n","  'sentence_id': 0,\n","  'ner': 'Further Specification'},\n"," {'text': 'he', 'token_indices': [11], 'sentence_id': 0, 'ner': 'Actor'},\n"," {'text': 'discusses',\n","  'token_indices': [12],\n","  'sentence_id': 0,\n","  'ner': 'Activity'},\n"," {'text': 'the KPIs',\n","  'token_indices': [13, 14],\n","  'sentence_id': 0,\n","  'ner': 'Activity Data'},\n"," {'text': 'while also',\n","  'token_indices': [15, 16],\n","  'sentence_id': 0,\n","  'ner': 'AND Gateway'},\n"," {'text': 'assigning',\n","  'token_indices': [17],\n","  'sentence_id': 0,\n","  'ner': 'Activity'},\n"," {'text': 'responsibilities',\n","  'token_indices': [18],\n","  'sentence_id': 0,\n","  'ner': 'Activity Data'},\n"," {'text': 'When these are done',\n","  'token_indices': [0, 1, 2, 3],\n","  'sentence_id': 1,\n","  'ner': 'AND Gateway'},\n"," {'text': 'The employee',\n","  'token_indices': [5, 6],\n","  'sentence_id': 1,\n","  'ner': 'Actor'},\n"," {'text': 'conducts',\n","  'token_indices': [7],\n","  'sentence_id': 1,\n","  'ner': 'Activity'},\n"," {'text': 'the project',\n","  'token_indices': [8, 9],\n","  'sentence_id': 1,\n","  'ner': 'Activity Data'},\n"," {'text': 'KPIs',\n","  'token_indices': [7],\n","  'sentence_id': 2,\n","  'ner': 'Activity Data'},\n"," {'text': 'evaluated',\n","  'token_indices': [9],\n","  'sentence_id': 2,\n","  'ner': 'Activity'},\n"," {'text': 'and in the meanwhile',\n","  'token_indices': [10, 11, 12, 13],\n","  'sentence_id': 2,\n","  'ner': 'AND Gateway'},\n"," {'text': 'the manager',\n","  'token_indices': [14, 15],\n","  'sentence_id': 2,\n","  'ner': 'Actor'},\n"," {'text': 'contacted',\n","  'token_indices': [18],\n","  'sentence_id': 2,\n","  'ner': 'Activity'}]"]},"metadata":{},"execution_count":6}]}]}